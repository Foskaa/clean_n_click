// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")

// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  email                  String        @unique
  role                   String
  password               String
  firstName              String
  lastName               String
  phoneNumber            String        @db.VarChar(20)
  profilePicture         String        @db.VarChar(255)
  isVerified             Boolean
  verifyCode             String?
  isGoogleRegister       Boolean
  isGooglePasswordChange Boolean?      @default(false)
  forgotPasswordToken    String?       @db.VarChar(300)
  isDiscountUsed         Boolean       @default(false)
  order                  Order[]
  userAddress            UserAddress[]
  contact                Contact[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model UserAddress {
  id            Int     @id @default(autoincrement())
  addressName   String
  addressDetail String  @db.VarChar(255)
  city          String
  isMain        Boolean
  province      String
  country       String
  zipCode       String
  latitude      Float
  longitude     Float
  userId        String?

  order Order[]

  User User? @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("usersAddresses")
}

model Store {
  id        String @id @default(uuid())
  storeName String
  address   String
  city      String
  province  String
  country   String
  zipCode   String
  latitude  Float
  longitude Float

  worker Worker[]
  order  Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("stores")
}

model Worker {
  id                  String  @id @default(uuid())
  email               String  @unique
  password            String
  workerRole          Role
  firstName           String
  lastName            String
  phoneNumber         String  @db.VarChar(20)
  profilePicture      String  @db.VarChar(255)
  identityNumber      String? @db.LongText
  motorcycleType      String?
  plateNumber         String?
  changePasswordToken String? @db.VarChar(500)
  storeId             String?
  shiftId             Int?

  orderstatus OrderStatus[]

  Shift Shift? @relation(fields: [shiftId], references: [id])
  Store Store? @relation(fields: [storeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("workers")
}

model Shift {
  id        Int      @id @default(autoincrement())
  startTime DateTime? @db.Time()
  endTime   DateTime? @db.Time()
  worker    Worker[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("shifts")
}

model Order {
  id            String   @id @default(uuid())
  totalPrice    Int?
  laundryPrice  Int?
  totalWeight   Int?
  discount      Float?
  deliveryFee   Int
  paymentProof  String?
  isPaid        Boolean
  isProcessed   Boolean?
  isDone        Boolean?
  isReqDelivery Boolean?
  isConfirm     Boolean?

  isSolved Boolean?
  notes    String?

  storeId       String?
  userId        String?
  orderTypeId   Int?
  userAddressId Int?

  orderStatus OrderStatus[]
  orderDetail OrderDetail[]

  Store       Store?       @relation(fields: [storeId], references: [id])
  User        User?        @relation(fields: [userId], references: [id])
  OrderType   OrderType?   @relation(fields: [orderTypeId], references: [id])
  UserAddress UserAddress? @relation(fields: [userAddressId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("orders")
}

model OrderType {
  id    Int     @id @default(autoincrement())
  type  String?
  price Int?

  order Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("orderTypes")
}

model OrderDetail {
  id            Int          @id @default(autoincrement())
  orderId       String?
  quantity      Int?
  laundryItemId Int?
  Order         Order?       @relation(fields: [orderId], references: [id])
  LaundryItem   LaundryItem? @relation(fields: [laundryItemId], references: [id])

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt

  @@map("orderDetails")
}

model LaundryItem {
  id          Int           @id @default(autoincrement())
  itemName    String
  orderDetail OrderDetail[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("laundryItems")
}

model OrderStatus {
  id       Int     @id @default(autoincrement())
  status   Status
  orderId  String?
  workerId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Order  Order?  @relation(fields: [orderId], references: [id])
  Worker Worker? @relation(fields: [workerId], references: [id])

  @@map("orderStatuses")
}

model Contact {
  id          Int     @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String  @db.VarChar(20)
  textHelp    String  @db.VarChar(255)
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("contacts")
}

enum Status {
  AWAITING_DRIVER_PICKUP
  DRIVER_TO_OUTLET
  DRIVER_ARRIVED_AT_OUTLET

  AWAITING_PAYMENT
  IN_WASHING_PROCESS
  IN_IRONING_PROCESS
  IN_PACKING_PROCESS
  PAYMENT_DONE

  DRIVER_TO_CUSTOMER
  DRIVER_DELIVERED_LAUNDRY
}

enum Role {
  SUPER_ADMIN
  OUTLET_ADMIN
  WASHING_WORKER
  IRONING_WORKER
  PACKING_WORKER
  DRIVER
}
