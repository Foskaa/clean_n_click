generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String        @id @default(uuid())
  email               String        @unique
  role                String
  password            String
  firstName           String
  lastName            String
  phoneNumber         String        @db.Text
  profilePicture      String
  isVerified          Boolean
  verifyCode          String?
  isGoogleRegister    Boolean
  forgotPasswordToken String?       @db.VarChar(300)
  isDiscountUsed      Boolean       @default(false)
  order               Order[]
  userAddress         UserAddress[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model UserAddress {
  id            Int     @id @default(autoincrement())
  addressName   String
  addressDetail String
  city          String
  isMain        Boolean
  province      String
  country       String
  zipCode       String
  latitude      Float
  longitude     Float
  usersId       String?

  order Order[]

  Users Users? @relation(fields: [usersId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("usersAddress")
}

model Stores {
  id        String @id @default(uuid())
  storeName String
  address   String
  city      String
  province  String
  country   String
  zipCode   String
  latitude  Float
  longitude Float

  worker Worker[]
  order  Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("stores")
}

model Worker {
  id                  String  @id @default(uuid())
  email               String  @unique
  password            String
  workerRole          Role
  firstName           String
  lastName            String
  phoneNumber         String  @db.Text
  profilePicture      String  @db.Text
  identityNumber      String? @db.Text
  motorcycleType      String?
  plateNumber         String?
  changePasswordToken String? @db.Text
  storesId            String?

  orderstatus OrderStatus[]

  Stores Stores? @relation(fields: [storesId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("worker")
}

model Order {
  id           String   @id @default(uuid())
  totalPrice   Int?
  totalWeight  Int?
  discount     Float?
  deliveryFee  Int
  paymentProof String?
  isPaid       Boolean
  isProcessed  Boolean?

  isSolved Boolean?
  notes    String?

  storesId      String?
  usersId       String?
  orderTypeId   Int?
  userAddressId Int?

  orderStatus OrderStatus[]
  orderDetail OrderDetail[]

  Stores      Stores?      @relation(fields: [storesId], references: [id])
  Users       Users?       @relation(fields: [usersId], references: [id])
  OrderType   OrderType?   @relation(fields: [orderTypeId], references: [id])
  UserAddress UserAddress? @relation(fields: [userAddressId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("order")
}

model OrderType {
  id    Int    @id @default(autoincrement())
  Type  String
  Price Int

  order Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("orderType")
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  orderId    String?
  itemNameId Int?
  quantity   Int?
  Order      Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt

  ItemName ItemName? @relation(fields: [itemNameId], references: [id])

  @@map("orderDetail")
}

model ItemName {
  id          Int           @id @default(autoincrement())
  itemName    String
  orderDetail OrderDetail[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("itemName")
}

model OrderStatus {
  id       Int     @id @default(autoincrement())
  status   Status
  orderId  String?
  workerId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Order  Order?  @relation(fields: [orderId], references: [id])
  Worker Worker? @relation(fields: [workerId], references: [id])

  @@map("orderStatus")
}

enum Status {
  AWAITING_DRIVER_PICKUP
  DRIVER_TO_OUTLET
  DRIVER_ARRIVED_AT_OUTLET

  IN_WASHING_PROCESS
  IN_IRONING_PROCESS
  IN_PACKING_PROCESS
  AWAITING_PAYMENT
  PAYMENT_DONE

  DRIVER_TO_CUSTOMER
  DRIVER_DELIVERED_LAUNDRY
}

enum Role {
  SUPER_ADMIN
  OUTLET_ADMIN
  WASHING_WORKER
  IRONING_WORKER
  PACKING_WORKER
  DRIVER
}
